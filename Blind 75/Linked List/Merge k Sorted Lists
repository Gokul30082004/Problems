class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0)
        return null;
        return mergsort(lists ,0,lists.length-1);
    }
    static ListNode mergsort(ListNode[] list,int start,int end){
        if(start==end){
            return list[start];
        }
        if(start+1==end){
            return merg(list[start],list[end]);
        }
        ListNode l=mergsort(list,start,start+(end-start)/2);
        ListNode r=mergsort(list,((start+(end-start)/2)+1),end);
        return merg(l,r);
    }
    static ListNode merg(ListNode l1,ListNode l2){
        ListNode dummy=new ListNode();
        ListNode temp=dummy;
        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                temp.next=l1;
                l1=l1.next;
            }
            else{
                temp.next=l2;
                l2=l2.next;
            }
            temp=temp.next;
        }
        while(l1!=null){
            temp.next=l1;
            l1=l1.next;
            temp=temp.next;
        }
        while(l2!=null){
            temp.next=l2;
            l2=l2.next;
            temp=temp.next;
        }
        return dummy.next;
    }
}
