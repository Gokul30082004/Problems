class Trie {
    static class node{
        node[] link=new node[26];
        boolean flag=false;
        boolean containskey(char c){
            return link[c-'a']!=null;
        }
        void put(char c,node n){
            link[c-'a']=n;
        }
        node get(char c){
            return link[c-'a'];
        }
        void setend(){
            flag=true;
        }
        boolean isend(){
            return flag;
        }
    }
    private node root;
    public Trie() {
        root=new node();
    }
    
    public void insert(String word) {
        int n=word.length();
        node temp=root;
        for(int i=0;i<n;i++){
            char c=word.charAt(i);
            if(!temp.containskey(c))
                temp.put(c,new node());
            temp=temp.get(c);
        }
        temp.setend();
    }
    
    public boolean search(String word) {
        node temp=root;
        int n=word.length();
        for(int i=0;i<n;i++){
            char c=word.charAt(i);
            if(!temp.containskey(c))
                return false;
            temp=temp.get(c);
        }
        return temp.isend();
    }
    
    public boolean startsWith(String word) {
        node temp=root;
        int n=word.length();
        for(int i=0;i<n;i++){
            char c=word.charAt(i);
            if(!temp.containskey(c))
                return false;
            temp=temp.get(c);
        }
        return true;
    }
}
