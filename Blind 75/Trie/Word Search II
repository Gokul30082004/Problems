public class tire{
    public tire[] link=new tire[26];
    public String s;
}
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        for(final String word:words){
            insert(word);
        }
        List<String> ans=new ArrayList<>();
        for(int i=0;i<board.length;i++)
            for(int j=0;j<board[0].length;j++)
                dfs(i,j,board,root,ans);
        return ans;
    }
    private tire root=new tire();
    private void insert(String word){
        tire temp=root;
        for(char c:word.toCharArray()){
            if(temp.link[c-'a']==null)
                temp.link[c-'a']=new tire();
            temp=temp.link[c-'a'];
        }
        temp.s=word;
    }
    private void dfs(int i,int j,char[][] board,tire node,List<String> ans){
        if(i<0 || j<0 || i==board.length || j==board[0].length)
            return;
        if(board[i][j]=='*')
            return;
        final char c=board[i][j];
        tire child=node.link[c-'a'];
        if(child==null)
            return;
        if(child.s!=null){
            ans.add(child.s);
            child.s=null;
        }
        board[i][j]='*';
        dfs(i+1,j,board,child,ans);
        dfs(i-1,j,board,child,ans);
        dfs(i,j+1,board,child,ans);
        dfs(i,j-1,board,child,ans);
        board[i][j]=c;
        return;
    }
}
