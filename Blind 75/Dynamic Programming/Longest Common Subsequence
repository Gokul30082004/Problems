class Solution {
    private int find(String s,String t,int n,int m,int[][] dp){
        if(n<0 || m<0)return 0;
        if(dp[n][m]!=-1) return dp[n][m];
        if(s.charAt(n)==t.charAt(m)) return dp[n][m]=1+find(s,t,n-1,m-1,dp);
        return dp[n][m]=Math.max(find(s,t,n-1,m,dp),find(s,t,n,m-1,dp));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int dp[][]=new int[n][m];
        for(int i=0;i<n;i++)
            Arrays.fill(dp[i],-1);
        return find(text1,text2,n-1,m-1,dp);
    }
}
