class Solution {
//divide and conquer
    private void merge(int arr[],int low,int n,int mid){
        int j=mid+1, temp[]=new int[n-low+1],k=0,i=low;
        while(i<=mid && j<=n){
            if(arr[i]<=arr[j]){
                temp[k]=arr[i];
                ++i;
            }
            else{
                temp[k]=arr[j];
                ++j;
            }
            ++k;
        }
        
        while(i<=mid){
            temp[k]=arr[i];
            ++i;
            k++;
        }
        while(j<=n){
            temp[k]=arr[j];
            ++j;
            ++k;
        }
        k=0;
        while(low<=n){
            arr[low]=temp[k];
            ++low;
            ++k;
        }
    }
    private void mergesort(int[] nums,int low,int high){
        if(low==high) return;
        int mid=(low+high)/2;
        mergesort(nums,low,mid);
        mergesort(nums,mid+1,high);
        merge(nums,low,high,mid);
    }
    public void sortColors(int[] nums) {
        mergesort(nums,0,nums.length-1);
    }
}
