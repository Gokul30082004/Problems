import java.util.*;

import com.sun.org.apache.bcel.internal.classfile.Node;
public class Solution {
    static class Graph {
        public static class Node {
            int first;
            int second;
            public Node(int first, int second) {
                this.first = first;
                this.second = second; 
            }
        }
        public static boolean find(int v,List<List<Integer>> adj,boolean[] visited,int i){
            visited[i]=true;
            Queue<Node> q=new LinkedList<>();
            q.add(new Node(i,-1));
            while(!q.isEmpty()){
                int sd=q.peek().first;
                int old=q.peek().second;
                q.remove();
                for(int p:adj.get(sd)){
                    if(visited[p]==false){
                        visited[p]=true;
                        q.add(new Node(p,sd));
                    }
                    else if(old!=p){
                            return true;
                    }
                }
            }
            return false;
        }
        boolean detectCycle(int v, List<List<Integer>> adj) {
            boolean visited[]=new boolean[v+1];
            Arrays.fill(visited,false);
            List<List<Integer>> list=new ArrayList<>();
            for(int i=0;i<adj.size();i++){
                list.add(new ArrayList<Integer>());
            }
            // for(List<Integer> i:adj){
            //     list.get(i.get(0)).add(i.get(1));
            //     list.get(i.get(1)).add(i.get(0));
            // }
            // System.out.println(list.get(0).get(0));
            for(int i=0;i<v;i++){
                if(visited[i]==false){
                    if(find(v,adj,visited,i)){
                        return true;
                    }
                }
            }
            return false;
        }
    };
}
