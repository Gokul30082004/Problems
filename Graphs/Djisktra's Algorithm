class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        List<ArrayList<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++)
        list.add(new ArrayList<>());
        
        for(int i=0;i<m;i++){
            list.get(edges[i][0]).add(edges[i][1]);
            list.get(edges[i][1]).add(edges[i][0]);
        }
        int dst[]=new int[n];
        Arrays.fill(dst,Integer.MAX_VALUE);
        dst[src]=0;
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        while(!q.isEmpty()){
            int it=q.poll();
            for(int num:list.get(it)){
                if(dst[it]+1<dst[num]){
                    dst[num]=dst[it]+1;
                    q.add(num);
                }
            }
        }
        for(int i=0;i<n;i++){
            if(dst[i]==Integer.MAX_VALUE)
                dst[i]=-1;
        }
        return dst;
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m=sc.nextInt();
            int[][] edge = new int[m][2];
            for(int i=0;i<m;i++){
                edge[i][0]=sc.nextInt();
                edge[i][1]=sc.nextInt();
            }
            int src=sc.nextInt();
            Solution obj = new Solution();
            int res[] = obj.shortestPath(edge,n,m,src);
            for(int i=0;i<n;i++){
                System.out.print(res[i]+" ");
            }
            System.out.println();
        }
    }
}
