class Solution {
    public static int find(int matrix[][],int i,int j,int dp[][]){
		if(i+1==matrix.length)
		{
			return matrix[i][j];
		}
		if(dp[i][j]!=-9) return dp[i][j];
		int left=Integer.MAX_VALUE,right=Integer.MAX_VALUE;
		if(j-1>=0)
		left=find(matrix,i+1,j-1,dp)+matrix[i][j];
		if(j+1<matrix[0].length)
		right=find(matrix,i+1,j+1,dp)+matrix[i][j];

		int mid=find(matrix,i+1,j,dp)+matrix[i][j];
		dp[i][j]=Math.min(mid,Math.min(left,right));
		return Math.min(mid,Math.min(left,right));
	}
    public int minFallingPathSum(int[][] matrix) {
        int ans=Integer.MAX_VALUE;
		int dp[][]=new int[matrix.length][matrix[0].length];
		for(int i=0;i<matrix.length;i++)
			Arrays.fill(dp[i],-9);
		for(int i=0;i<matrix[0].length;i++){
			ans=Math.min(ans,find(matrix,0,i,dp));
		}
		return ans;
    }
}
